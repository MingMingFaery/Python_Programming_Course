{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 第一题 \n",
    "- 在文件 诗经.txt 中存储了部分诗经诗篇。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "302\n"
     ]
    }
   ],
   "source": [
    "## （1）读取 诗经.txt ；\n",
    "with open (\"./诗经.txt\") as f:\n",
    "    book = f.readlines()\n",
    "## （2）判断该文本中共有多少篇文章；\n",
    "def count_paper(book):\n",
    "    punc = [\"。\",\".\",\",\",\"，\",\"！\",\"《\",\"·\"]\n",
    "    article = []\n",
    "    for line in book:\n",
    "        line = line.strip(\"\\n\").strip()\n",
    "        judge = 1\n",
    "        if len(line)==0:\n",
    "            continue\n",
    "        for pun in punc:\n",
    "            if pun in line:\n",
    "                judge = 0\n",
    "                break\n",
    "        if judge and line not in article:article.append(line)\n",
    "    return article\n",
    "article = count_paper(book)\n",
    "print(len(article))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('之', 2695)\n",
      "('不', 1714)\n",
      "('有', 1600)\n",
      "('其', 1474)\n",
      "('我', 1379)\n",
      "('子', 1091)\n",
      "('于', 940)\n",
      "('以', 888)\n",
      "('维', 880)\n",
      "('无', 846)\n",
      "('彼', 779)\n",
      "('王', 732)\n",
      "('尔', 678)\n",
      "('人', 672)\n",
      "('既', 669)\n"
     ]
    }
   ],
   "source": [
    "## （3）该文本中最常出现的字有哪些，输出前十五个；\n",
    "def count_word(book):\n",
    "    words = {}\n",
    "    stop = \"，,.。《》·!！？\\n\"\n",
    "    for line in book:\n",
    "        for w in line:\n",
    "            if w in stop:\n",
    "                continue\n",
    "            if w not in words:\n",
    "                words[w] = 1\n",
    "            else:\n",
    "                words[w] += 1\n",
    "    words = sorted(words.items(),key=lambda item:item[1],reverse=True)\n",
    "\n",
    "    return words\n",
    "words = count_word(book)   \n",
    "for i in range(15):\n",
    "    print(words[i]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "关雎 111001011000010110110011111010011001101110001110\n",
      "葛覃 111010001001000110011011111010001010011010000011\n",
      "卷耳 111001011000110110110111111010001000000010110011\n",
      "樛木 111001101010100010011011111001101001110010101000\n",
      "螽斯 111010001001111010111101111001101001011010101111\n",
      "桃夭 111001101010000110000011111001011010010010101101\n",
      "兔罝 111001011000010110010100111001111011110110011101\n",
      "芣苡 111010001000101010100011111010001000101110100001\n",
      "汉广 111001101011000110001001111001011011100110111111\n",
      "汝坟 111001101011000110011101111001011001110110011111\n"
     ]
    }
   ],
   "source": [
    "## （4）将所有文章的标题转换为二进制；\n",
    "def chinese_to_binary(chinese_text):\n",
    "    binary_data = chinese_text.encode('utf-8')\n",
    "    binary_string = ''.join(format(byte, '08b') for byte in binary_data)\n",
    "    return binary_string\n",
    "article_bin = list(map(chinese_to_binary,article))\n",
    "for i in range(10):\n",
    "    print(article[i],article_bin[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "658\n"
     ]
    }
   ],
   "source": [
    "## （5）诗经主要以四言为主，兼有杂言。请见该文本中所有杂言写入到 诗经杂言.txt 文件中\n",
    "def non_standard(book):\n",
    "    info = []\n",
    "    punc = [\"。\",\".\",\",\",\"，\",\"！\",\"？\",\"：\",\"；\",\"?\",\"!\",\"/\"]\n",
    "    for line in book:\n",
    "        line = line.strip(\"\\n\").strip()\n",
    "        if len(line)<5:\n",
    "            continue\n",
    "        judge = 1\n",
    "        for pun in punc :\n",
    "            if pun in line:\n",
    "                line = line.replace(pun,\"|\")\n",
    "                judge = 0\n",
    "        if judge:\n",
    "            continue\n",
    "        duns = line.split(\"|\")\n",
    "        for dun in duns:\n",
    "            dun = dun.strip()\n",
    "            if len(dun)!=0 and len(dun)!=4:\n",
    "                if dun not in info:\n",
    "                    info.append(dun)\n",
    "    return info\n",
    "info = non_standard(book)\n",
    "with open(\"诗经杂言.txt\",\"w\",encoding=\"utf-8\") as f:\n",
    "    for line in info:f.write(line+\"\\n\")\n",
    "print(len(info))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
